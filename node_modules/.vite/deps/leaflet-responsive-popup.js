import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/leaflet-responsive-popup/leaflet.responsive.popup.js
var require_leaflet_responsive_popup = __commonJS({
  "node_modules/leaflet-responsive-popup/leaflet.responsive.popup.js"(exports, module) {
    L.ResponsivePopup = L.Popup.extend({
      options: {
        hasTip: true
      },
      _initLayout: function() {
        var prefix = "leaflet-popup", container = this._container = L.DomUtil.create(
          "div",
          prefix + " " + (this.options.className || "") + " leaflet-zoom-animated"
        );
        var wrapper = this._wrapper = L.DomUtil.create("div", prefix + "-content-wrapper", container);
        this._contentNode = L.DomUtil.create("div", prefix + "-content", wrapper);
        L.DomEvent.disableClickPropagation(container);
        L.DomEvent.disableScrollPropagation(this._contentNode);
        L.DomEvent.on(container, "contextmenu", L.DomEvent.stopPropagation);
        this._tipContainer = L.DomUtil.create("div", prefix + "-tip-container", container);
        if (!this.options.hasTip) {
          this._tipContainer.style.visibility = "hidden";
        }
        this._tip = L.DomUtil.create("div", prefix + "-tip", this._tipContainer);
        if (this.options.closeButton) {
          var closeButton = this._closeButton = L.DomUtil.create("a", prefix + "-close-button", container);
          closeButton.setAttribute("role", "button");
          closeButton.setAttribute("aria-label", "Close popup");
          closeButton.href = "#close";
          closeButton.innerHTML = '<span aria-hidden="true">&#215;</span>';
          L.DomEvent.on(closeButton, "click", function(ev) {
            L.DomEvent.preventDefault(ev);
            this.close();
          }, this);
        }
      },
      _updatePosition: function() {
        if (!this._map) {
          return;
        }
        var pos = this._map.latLngToLayerPoint(this._latlng), basePoint = this._map.layerPointToContainerPoint(pos), containerWidth = this._container.offsetWidth, containerHeight = this._container.offsetHeight, padding = L.point(this.options.autoPanPadding), paddingTL = L.point(this.options.autoPanPaddingTopLeft || padding), paddingBR = L.point(this.options.autoPanPaddingBottomRight || padding), mapSize = this._map.getSize(), anchor = this._getAnchor(), offset = L.point(this.options.offset);
        var tipHeight = 11;
        var tipWidth = 22;
        var containerRadius = 12;
        var offsetX = Math.abs(offset.x);
        var offsetY = Math.abs(offset.y);
        if (this.options.hasTip) {
          offsetX += tipHeight;
          offsetY += tipHeight;
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-north");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-south");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-east");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-west");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-north-east");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-north-west");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-south-east");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-south-west");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-east-north");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-east-south");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-west-north");
          L.DomUtil.removeClass(this._container, "leaflet-resp-popup-west-south");
        }
        var canGoTop = true, canGoBottom = true, canGoLeft = true, canGoRight = true, containerPos = false;
        if (basePoint.y + anchor.y - offsetY - containerHeight - Math.abs(paddingTL.y) < 0) {
          canGoTop = false;
        }
        if (basePoint.y + anchor.y + offsetY + containerHeight + Math.abs(paddingBR.y) > mapSize.y) {
          canGoBottom = false;
        }
        if (basePoint.x + anchor.x - offsetX - containerWidth - Math.abs(paddingTL.x) < 0) {
          canGoLeft = false;
        }
        if (basePoint.x + anchor.x + offsetX + containerWidth + Math.abs(paddingBR.x) > mapSize.x) {
          canGoRight = false;
        }
        var subtractX = containerWidth / 2 - anchor.x, subtractY = containerHeight / 2 - anchor.y;
        if (canGoTop || canGoBottom) {
          var containerLeft = basePoint.x + anchor.x - containerWidth / 2;
          var containerRight = basePoint.x + anchor.x + containerWidth / 2;
          if (containerLeft < Math.abs(paddingTL.x)) {
            subtractX = containerWidth / 2 - anchor.x - Math.abs(paddingTL.x) + containerLeft;
          }
          if (containerRight > mapSize.x - Math.abs(paddingBR.x)) {
            subtractX = containerWidth / 2 - anchor.x + containerRight - mapSize.x + Math.abs(paddingBR.x);
          }
        }
        if (canGoLeft || canGoRight) {
          var containerTop = basePoint.y + anchor.y - containerHeight / 2;
          var containerBottom = basePoint.y + anchor.y + containerHeight / 2;
          if (containerTop < Math.abs(paddingTL.y)) {
            subtractY = containerHeight / 2 - anchor.y - Math.abs(paddingTL.y) + containerTop;
          }
          if (containerBottom > mapSize.y - Math.abs(paddingBR.y)) {
            subtractY = containerHeight / 2 - anchor.y + containerBottom - mapSize.y + Math.abs(paddingBR.y);
          }
        }
        if (canGoTop) {
          containerPos = pos.subtract(L.point(subtractX, -anchor.y + containerHeight + offsetY, true));
          if (this.options.hasTip) {
            if (basePoint.x + anchor.x < paddingTL.x + containerRadius + tipWidth / 2) {
              containerPos.x = pos.x + anchor.x;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-north-east");
              this._tipContainer.style.top = containerHeight + "px";
              this._tipContainer.style.left = "0px";
            } else if (basePoint.x + anchor.x > mapSize.x - paddingBR.x - containerRadius - tipWidth / 2) {
              containerPos.x = pos.x + anchor.x - containerWidth;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-north-west");
              this._tipContainer.style.top = containerHeight + "px";
              this._tipContainer.style.left = containerWidth + "px";
            } else {
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-north");
              this._tipContainer.style.top = containerHeight + "px";
              this._tipContainer.style.left = pos.x + anchor.x - containerPos.x + "px";
            }
          }
        } else if (canGoLeft) {
          containerPos = pos.subtract(L.point(-anchor.x + containerWidth + offsetX, subtractY, true));
          if (this.options.hasTip) {
            if (basePoint.y + anchor.y < paddingTL.y + containerRadius + tipWidth / 2) {
              containerPos.y = pos.y + anchor.y;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-west-south");
              this._tipContainer.style.top = "0px";
              this._tipContainer.style.left = containerWidth + "px";
            } else if (basePoint.y + anchor.y > mapSize.y - paddingBR.y - containerRadius - tipWidth / 2) {
              containerPos.y = pos.y + anchor.y - containerHeight;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-west-north");
              this._tipContainer.style.top = containerHeight + "px";
              this._tipContainer.style.left = containerWidth + "px";
            } else {
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-west");
              this._tipContainer.style.top = pos.y + anchor.y - containerPos.y + "px";
              this._tipContainer.style.left = containerWidth + "px";
            }
          }
        } else if (canGoBottom) {
          containerPos = pos.subtract(L.point(subtractX, -anchor.y - offsetY, true));
          if (this.options.hasTip) {
            if (basePoint.x + anchor.x < paddingTL.x + containerRadius + tipWidth / 2) {
              containerPos.x = pos.x + anchor.x;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-south-east");
              this._tipContainer.style.top = "0px";
              this._tipContainer.style.left = "0px";
            } else if (basePoint.x + anchor.x > mapSize.x - paddingBR.x - containerRadius - tipWidth / 2) {
              containerPos.x = pos.x + anchor.x - containerWidth;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-south-west");
              this._tipContainer.style.top = "0px";
              this._tipContainer.style.left = containerWidth + "px";
            } else {
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-south");
              this._tipContainer.style.top = "0px";
              this._tipContainer.style.left = pos.x + anchor.x - containerPos.x + "px";
            }
          }
        } else if (canGoRight) {
          containerPos = pos.subtract(L.point(-anchor.x - offsetX, subtractY, true));
          if (this.options.hasTip) {
            if (basePoint.y + anchor.y < paddingTL.y + containerRadius + tipWidth / 2) {
              containerPos.y = pos.y + anchor.y;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-east-south");
              this._tipContainer.style.top = "0px";
              this._tipContainer.style.left = "0px";
            } else if (basePoint.y + anchor.y > mapSize.y - paddingBR.y - containerRadius - tipWidth / 2) {
              containerPos.y = pos.y + anchor.y - containerHeight;
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-east-north");
              this._tipContainer.style.top = containerHeight + "px";
              this._tipContainer.style.left = "0px";
            } else {
              L.DomUtil.addClass(this._container, "leaflet-resp-popup-east");
              this._tipContainer.style.top = pos.y + anchor.y - containerPos.y + "px";
              this._tipContainer.style.left = "0px";
            }
          }
        } else {
          var pos = this._map.latLngToLayerPoint(this._map.getCenter());
          containerPos = pos.subtract(L.point(containerWidth / 2, containerHeight / 2));
          if (this.options.hasTip) {
          }
        }
        if (basePoint.x < 0 || basePoint.y < 0 || basePoint.x > mapSize.x || basePoint.y > mapSize.y) {
        }
        if (containerWidth - Math.abs(paddingTL.x) - Math.abs(paddingBR.x) > mapSize.x || containerHeight - Math.abs(paddingTL.y) - Math.abs(paddingBR.y) > mapSize.y) {
        }
        L.DomUtil.setPosition(this._container, containerPos);
      }
    });
    L.responsivePopup = function(options, source) {
      return new L.ResponsivePopup(options, source);
    };
    if (typeof exports === "object" && typeof module !== "undefined") {
      exports.responsivePopup = L.responsivePopup;
      exports.ResponsivePopup = L.ResponsivePopup;
    }
  }
});

// dep:leaflet-responsive-popup
var leaflet_responsive_popup_default = require_leaflet_responsive_popup();
export {
  leaflet_responsive_popup_default as default
};
//# sourceMappingURL=leaflet-responsive-popup.js.map
